<?xml version='1.0' encoding='UTF-8'?>
<sdf version="1.6">

  <!--
  BlueROV2 Underwater Robot Model for Gazebo Simulation
  
  Description:
  This SDF file defines a model of the BlueROV2, an underwater remotely operated vehicle (ROV).
  The model includes the physical properties, sensors, and actuators of the BlueROV2.
  
  Features:
  - Accurate physical dimensions and inertial properties
  - 6 thrusters for 6 degrees of freedom movement
  - IMU sensor for orientation and acceleration
  - DVL (Doppler Velocity Log) sensor for velocity measurement
  - Hydrodynamics plugin for realistic underwater behavior
  - Thruster plugins for propulsion simulation
  
  Sensors:
  - IMU: Updates at 50Hz, includes noise models for linear acceleration and angular velocity
  - DVL: Updates at 50Hz, simulates both bottom tracking and water mass modes
  - Depth sensor: Updates at 50 Hz, simulated using OdometryPublisher (see scripts/depth_sensor_from_odom.py)
  
  Plugins:
  - JointStatePublisher: Publishes joint states
  - PosePublisher: Publishes pose information
  - OdometryPublisher: Publishes odometry data
  - Hydrodynamics: Simulates underwater forces and moments
  - Thruster (x6): Simulates each thruster's behavior
  
  Usage:
  This model can be included in a Gazebo world file or spawned dynamically in a simulation.
  It is designed to be used with ROS2 and Gazebo for underwater robotics research and development.
  -->

  <model name="bluerov2">
    <pose>0 0 0 0 0 0</pose>

    <plugin
      filename="gz-sim-joint-state-publisher-system"
      name="gz::sim::systems::JointStatePublisher">
    </plugin>
    
    <plugin
      filename="gz-sim-pose-publisher-system"
      name="gz::sim::systems::PosePublisher">
      <publish_link_pose>true</publish_link_pose>
      <publish_sensor_pose>true</publish_sensor_pose>
      <use_pose_vector_msg>true</use_pose_vector_msg>
      <static_publisher>true</static_publisher>
      <static_update_frequency>1</static_update_frequency>
      <publish_nested_models>true</publish_nested_models>
    </plugin>
    
    <plugin
      filename="gz-sim-odometry-publisher-system"
      name="gz::sim::systems::OdometryPublisher">
      <odom_frame>world</odom_frame>
      <robot_base_frame>bluerov2</robot_base_frame>
      <dimensions>3</dimensions>
    </plugin>

    <plugin filename="libDVLRosConverter.so" name="marsim_gazebo::DVLRosConverter">
      <input_topic>/model/bluerov2/dvl/velocity</input_topic>
      <velocity_output_topic>/model/bluerov2/dvl_ros_compatible/velocity</velocity_output_topic>
      <range_output_topic>/model/bluerov2/dvl_ros_compatible/range</range_output_topic>
    </plugin> 

    <link name="base_link">
      <inertial>
        <pose>0.0 0.0 0.011 0 0 0</pose>
        <mass>10.0</mass>
        <inertia>
          <ixx>0.099</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.178</iyy>
          <iyz>0</iyz>
          <izz>0.269</izz>
        </inertia>
      </inertial>

      <visual name="base_link_visual">
        <geometry>
          <mesh>
            <!-- The absolute file path is used so that it can be loaded by both GZ and RVIZ2 -->
            <uri>file:///home/marsim_sdf_ws/src/marsim_gazebo/models/bluerov2/meshes/bluerov2.dae</uri> 
            <scale>0.025 0.025 0.025</scale>
          </mesh>
        </geometry>
      </visual>

      <!-- Collision volume * fluid_density == displaced mass, used by BuoyancyPlugin -->
      <collision name="base_link_collision">
        <pose>0.0 0.0 0.06 0 0 0</pose>
        <geometry>
          <box>
            <size>0.457 0.338 0.065</size>
          </box>
        </geometry>
      </collision>

      <sensor name="imu_sensor" type="imu">
        <always_on>1</always_on>
        <update_rate>50</update_rate>
        <visualize>true</visualize>
        <topic>model/bluerov2/imu</topic>
        <imu>
          <linear_acceleration>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>0.001</stddev>
                <bias_mean>0.001</bias_mean>
                <bias_stddev>0.0001</bias_stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>0.001</stddev>
                <bias_mean>0.001</bias_mean>
                <bias_stddev>0.0001</bias_stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>0.001</stddev>
                <bias_mean>0.001</bias_mean>
                <bias_stddev>0.0001</bias_stddev>
              </noise>
            </z>
          </linear_acceleration>
          <angular_velocity>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>0.001</stddev>
                <bias_mean>0.001</bias_mean>
                <bias_stddev>0.0001</bias_stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>0.001</stddev>
                <bias_mean>0.001</bias_mean>
                <bias_stddev>0.0001</bias_stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>0.001</stddev>
                <bias_mean>0.001</bias_mean>
                <bias_stddev>0.0001</bias_stddev>
              </noise>
            </z>
          </angular_velocity>
          <orientation_reference_frame>
            <localization>ENU</localization>
          </orientation_reference_frame>
          <enable_orientation>true</enable_orientation>
        </imu>
      </sensor>  

      <sensor name="dvl_sensor" type="custom" gz:type="dvl">
        <!-- Account for DVL mounting position and base link rotation -->
        <pose degrees="true">0.0 0 -0.2 0 0 180</pose>
        <always_on>1</always_on>
        <update_rate>50</update_rate>
        <topic>/model/bluerov2/dvl/velocity</topic>
        <gz:dvl>
          <type>phased_array</type>
          <arrangement degrees="true">
            <beam id="1">
              <aperture>2.1</aperture>
              <rotation>45</rotation>
              <tilt>30</tilt>
            </beam>
            <beam>
              <aperture>2.1</aperture>
              <rotation>135</rotation>
              <tilt>30</tilt>
            </beam>
            <beam>
              <aperture>2.1</aperture>
              <rotation>-45</rotation>
              <tilt>30</tilt>
            </beam>
            <beam>
              <aperture>2.1</aperture>
              <rotation>-135</rotation>
              <tilt>30</tilt>
            </beam>
          </arrangement>
          <tracking>
            <bottom_mode>
              <when>best</when>
              <noise type="gaussian">
                <!-- +/- 0.4 cm/s precision at 10 m/s within 2 stddevs -->
                <stddev>0.002</stddev>
              </noise>
              <visualize>false</visualize>
            </bottom_mode>
            <water_mass_mode>
              <when>best</when>
              <water_velocity>
                <x>eastward_sea_water_velocity_meter_per_sec</x>
                <y>northward_sea_water_velocity_meter_per_sec</y>
              </water_velocity>
              <boundaries>
                <near>20.</near>
                <far>60.</far>
              </boundaries>
              <bins>10</bins>
              <noise type="gaussian">
                <!-- +/- 0.7 cm/s precision at 10 m/s within 2 stddevs -->
                <stddev>0.0035</stddev>
              </noise>
              <visualize>false</visualize>
            </water_mass_mode>
          </tracking>
          <!-- Roughly 1 m resolution at a 100m -->
          <resolution>0.01</resolution>
          <!-- Approximate maximum range @ ~14.4v -->
          <maximum_range>80.</maximum_range>
          <minimum_range>0.1</minimum_range>
          <!-- ENU to SFM -->
          <reference_frame>0 0 0 0 0 -1.570796</reference_frame>
        </gz:dvl>
      </sensor>              
    </link>

    <!-- Hydrodynamics plugin -->
    <plugin
        filename="gz-sim-hydrodynamics-system"
        name="gz::sim::systems::Hydrodynamics">
      <link_name>base_link</link_name>
      <water_density>998.0</water_density>
      <!-- Added mass: -->
      <xDotU>0</xDotU>
      <yDotV>0</yDotV>
      <zDotW>0</zDotW>
      <kDotP>0</kDotP>
      <mDotQ>0</mDotQ>
      <nDotR>0</nDotR>
      <!-- First order stability derivative: -->
      <xU>0</xU>
      <yV>0</yV>
      <zW>0</zW>
      <kP>0</kP>
      <mQ>0</mQ>
      <nR>0</nR>
      <!-- Second order stability derivative: -->
      <xUabsU>-33.732</xUabsU>
      <yVabsV>-54.16</yVabsV>
      <zWabsW>-73.225</zWabsW>
      <kPabsP>-3.992</kPabsP>
      <mQabsQ>-3.992</mQabsQ>
      <nRabsR>-3.992</nRabsR>
      <!-- Specify the fluid velocity topic -->
      <namespace>bluerov2</namespace>
    </plugin>

    <link name="thruster1">
      <pose>0.14 -0.092 0.0 -1.571 1.571 -0.785</pose>
      <visual name="thruster_prop_visual">
        <pose>0 0 0 -1.571 0 0</pose>
        <geometry>
          <mesh>
            <!-- The absolute file path is used so that it can be loaded by both GZ and RVIZ2 -->
            <uri>file:///home/marsim_sdf_ws/src/marsim_gazebo/models/bluerov2/meshes/t200_ccw_prop.dae</uri> 
          </mesh>
        </geometry>
      </visual>
      <inertial>
        <mass>0.002</mass>
        <inertia>
          <ixx>0.001</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.001</iyy>
          <iyz>0</iyz>
          <izz>0.001</izz>
        </inertia>
      </inertial>
    </link>

    <link name="thruster2">
      <pose>0.14 0.092 0.0 -1.571 1.571 -2.356</pose>
      <visual name="thruster_prop_visual">
        <pose>0 0 0 -1.571 0 0</pose>
        <geometry>
          <mesh>
            <!-- The absolute file path is used so that it can be loaded by both GZ and RVIZ2 -->
            <uri>file:///home/marsim_sdf_ws/src/marsim_gazebo/models/bluerov2/meshes/t200_ccw_prop.dae</uri> 
          </mesh>
        </geometry>
      </visual>
      <inertial>
        <mass>0.002</mass>
        <inertia>
          <ixx>0.001</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.001</iyy>
          <iyz>0</iyz>
          <izz>0.001</izz>
        </inertia>
      </inertial>
    </link>

    <link name="thruster3">
      <pose>-0.15 -0.092 0.0 -1.571 1.571 0.785</pose>
      <visual name="thruster_prop_visual">
        <pose>0 0 0 1.571 0 0</pose>
        <geometry>
          <mesh>
            <!-- The absolute file path is used so that it can be loaded by both GZ and RVIZ2 -->
            <uri>file:///home/marsim_sdf_ws/src/marsim_gazebo/models/bluerov2/meshes/t200_cw_prop.dae</uri> 
          </mesh>
        </geometry>
      </visual>
      <inertial>
        <mass>0.002</mass>
        <inertia>
          <ixx>0.001</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.001</iyy>
          <iyz>0</iyz>
          <izz>0.001</izz>
        </inertia>
      </inertial>
    </link>

    <link name="thruster4">
      <pose>-0.15 0.092 0.0 -1.571 1.571 2.356</pose>
      <visual name="thruster_prop_visual">
        <pose>0 0 0 1.571 0 0</pose>
        <geometry>
          <mesh>
            <!-- The absolute file path is used so that it can be loaded by both GZ and RVIZ2 -->
            <uri>file:///home/marsim_sdf_ws/src/marsim_gazebo/models/bluerov2/meshes/t200_cw_prop.dae</uri> 
          </mesh>
        </geometry>
      </visual>
      <inertial>
        <mass>0.002</mass>
        <inertia>
          <ixx>0.001</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.001</iyy>
          <iyz>0</iyz>
          <izz>0.001</izz>
        </inertia>
      </inertial>
    </link>

    <link name="thruster5">
      <pose>0.0 -0.109 0.077 0 0 0</pose>
      <visual name="thruster_prop_visual">
        <pose>0 0 0 -1.571 0 1.571</pose>
        <geometry>
          <mesh>
            <!-- The absolute file path is used so that it can be loaded by both GZ and RVIZ2 -->
            <uri>file:///home/marsim_sdf_ws/src/marsim_gazebo/models/bluerov2/meshes/t200_ccw_prop.dae</uri> 
          </mesh>
        </geometry>
      </visual>
      <inertial>
        <mass>0.002</mass>
        <inertia>
          <ixx>0.001</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.001</iyy>
          <iyz>0</iyz>
          <izz>0.001</izz>
        </inertia>
      </inertial>
    </link>

    <link name="thruster6">
      <pose>0.0 0.109 0.077 0 0 0</pose>
      <visual name="thruster_prop_visual">
        <pose>0 0 0 1.571 0 1.571</pose>
        <geometry>
          <mesh>
            <!-- The absolute file path is used so that it can be loaded by both GZ and RVIZ2 -->
            <uri>file:///home/marsim_sdf_ws/src/marsim_gazebo/models/bluerov2/meshes/t200_cw_prop.dae</uri> 
          </mesh>
        </geometry>
      </visual>
      <inertial>
        <mass>0.002</mass>
        <inertia>
          <ixx>0.001</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.001</iyy>
          <iyz>0</iyz>
          <izz>0.001</izz>
        </inertia>
      </inertial>
    </link>

    <joint name="thruster1_joint" type="revolute">
      <parent>base_link</parent>
      <child>thruster1</child>
      <axis>
        <xyz>0 0 -1</xyz>
      </axis>
    </joint>

    <joint name="thruster2_joint" type="revolute">
      <parent>base_link</parent>
      <child>thruster2</child>
      <axis>
        <xyz>0 0 -1</xyz>
      </axis>
    </joint>

    <joint name="thruster3_joint" type="revolute">
      <parent>base_link</parent>
      <child>thruster3</child>
      <axis>
        <xyz>0 0 -1</xyz>
      </axis>
    </joint>

    <joint name="thruster4_joint" type="revolute">
      <parent>base_link</parent>
      <child>thruster4</child>
      <axis>
        <xyz>0 0 -1</xyz>
      </axis>
    </joint>

    <joint name="thruster5_joint" type="revolute">
      <parent>base_link</parent>
      <child>thruster5</child>
      <axis>
        <xyz>0 0 -1</xyz>
      </axis>
    </joint>

    <joint name="thruster6_joint" type="revolute">
      <parent>base_link</parent>
      <child>thruster6</child>
      <axis>
        <xyz>0 0 -1</xyz>
      </axis>
    </joint>

    <plugin
        filename="gz-sim-thruster-system"
        name="gz::sim::systems::Thruster">
      <namespace>bluerov2</namespace>
      <joint_name>thruster1_joint</joint_name>
      <thrust_coefficient>0.02</thrust_coefficient>
      <fluid_density>998.0</fluid_density>
      <propeller_diameter>0.1</propeller_diameter>
      <velocity_control>true</velocity_control>
      <use_angvel_cmd>False</use_angvel_cmd>
    </plugin>

    <plugin
      filename="gz-sim-thruster-system"
      name="gz::sim::systems::Thruster">
      <namespace>bluerov2</namespace>
      <joint_name>thruster2_joint</joint_name>
      <thrust_coefficient>0.02</thrust_coefficient>
      <fluid_density>998.0</fluid_density>
      <propeller_diameter>0.1</propeller_diameter>
      <velocity_control>true</velocity_control>
      <use_angvel_cmd>False</use_angvel_cmd>
    </plugin>

    <plugin
      filename="gz-sim-thruster-system"
      name="gz::sim::systems::Thruster">
      <namespace>bluerov2</namespace>
      <joint_name>thruster3_joint</joint_name>
      <!-- Reverse spin to balance torque -->
      <thrust_coefficient>-0.02</thrust_coefficient>
      <fluid_density>998.0</fluid_density>
      <propeller_diameter>0.1</propeller_diameter>
      <velocity_control>true</velocity_control>
      <use_angvel_cmd>False</use_angvel_cmd>
    </plugin>

    <plugin
      filename="gz-sim-thruster-system"
      name="gz::sim::systems::Thruster">
      <namespace>bluerov2</namespace>
      <joint_name>thruster4_joint</joint_name>
      <!-- Reverse spin to balance torque -->
      <thrust_coefficient>-0.02</thrust_coefficient>
      <fluid_density>998.0</fluid_density>
      <propeller_diameter>0.1</propeller_diameter>
      <velocity_control>true</velocity_control>
      <use_angvel_cmd>False</use_angvel_cmd>
    </plugin>

    <plugin
      filename="gz-sim-thruster-system"
      name="gz::sim::systems::Thruster">
      <namespace>bluerov2</namespace>
      <joint_name>thruster5_joint</joint_name>
      <thrust_coefficient>0.02</thrust_coefficient>
      <fluid_density>998.0</fluid_density>
      <propeller_diameter>0.1</propeller_diameter>
      <velocity_control>true</velocity_control>
      <use_angvel_cmd>False</use_angvel_cmd>
    </plugin>

    <plugin
      filename="gz-sim-thruster-system"
      name="gz::sim::systems::Thruster">
      <namespace>bluerov2</namespace>
      <joint_name>thruster6_joint</joint_name>
      <!-- Reverse spin to balance torque -->
      <thrust_coefficient>-0.02</thrust_coefficient>
      <fluid_density>998.0</fluid_density>
      <propeller_diameter>0.1</propeller_diameter>
      <velocity_control>true</velocity_control>
      <use_angvel_cmd>False</use_angvel_cmd>
    </plugin>

  </model>
  
</sdf>